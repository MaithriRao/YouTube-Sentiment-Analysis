name: workflow

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  Continuous-Deployment:
    name: Continuous Deployment (EC2 Runner)
    needs: build-and-push-ecr-image
    runs-on: self-hosted # Targets your EC2 runner
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # IMPORTANT: If the ECR Login failed previously, this is the most common reason.
      # We repeat the AWS configuration and ECR login steps on the self-hosted runner
      # because the credentials from the previous job are not automatically carried over.
      - name: Configure AWS credentials for Deployment
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR for Deployment
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Pull latest image and run container
        env:
          ECR_URI: ${{ secrets.AWS_ECR_LOGIN_URI }}
          ECR_REPO: ${{ secrets.ECR_REPOSITORY_NAME }}
          # CORRECTED: Fixed typo in AWS_KEY mapping
          AWS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          # CRITICAL FIX: Mapping the secret to a shell variable
          YOUTUBE_KEY: ${{ secrets.YOUTUBE_API_KEY }} 
          # NEW: Adding MLFlow URI variable for container environment
          MLFLOW_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
        run: |
          # DEBUGGING: Print the values of ECR variables (GitHub automatically masks the actual secret value)
          echo "DEBUG ECR_URI: $ECR_URI"
          echo "DEBUG ECR_REPO: $ECR_REPO"
        
          IMAGE_URL="$ECR_URI/$ECR_REPO:latest"
          
          echo "Pulling latest image: $IMAGE_URL"
          docker pull $IMAGE_URL
          
          echo "Stopping and removing previous container 'cnncls'..."
          # The -f flag forces removal if stopping fails.
          docker rm -f cnncls || true 
          
          echo "Running new container 'cnncls' on port 8080..."
          docker run -d -p 8080:8080 --name=cnncls \
            -e 'YOUTUBE_API_KEY='$YOUTUBE_KEY \
            -e 'AWS_ACCESS_KEY_ID='$AWS_KEY \
            -e 'AWS_SECRET_ACCESS_KEY='$AWS_SECRET \
            -e 'AWS_REGION='$AWS_REGION \
            -e 'MLFLOW_TRACKING_URI='$MLFLOW_URI \
            $IMAGE_URL
            
      - name: Clean previous images and containers
        run: |
          # Prune old images/containers to save disk space on the EC2 machine
          docker system prune -f --volumes